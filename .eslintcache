[{"E:\\react\\Chat_Room\\src\\index.js":"1","E:\\react\\Chat_Room\\src\\reportWebVitals.js":"2","E:\\react\\Chat_Room\\src\\App.js":"3","E:\\react\\Chat_Room\\src\\componenets\\join\\Join.js":"4","E:\\react\\Chat_Room\\src\\componenets\\Chat\\Chat.js":"5","E:\\react\\Chat_Room\\src\\componenets\\Chat\\Drawer.js":"6","E:\\react\\Chat_Room\\src\\config\\Config.js":"7","E:\\react\\Chat_Room\\src\\componenets\\Loader.js":"8"},{"size":500,"mtime":1609662719999,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1609662719999,"results":"11","hashOfConfig":"10"},{"size":907,"mtime":1610362444021,"results":"12","hashOfConfig":"10"},{"size":1265,"mtime":1610393234507,"results":"13","hashOfConfig":"10"},{"size":8615,"mtime":1610396783955,"results":"14","hashOfConfig":"10"},{"size":8450,"mtime":1610396783672,"results":"15","hashOfConfig":"10"},{"size":562,"mtime":1610393031465,"results":"16","hashOfConfig":"10"},{"size":2336,"mtime":1610395180601,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1d3f8lo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\react\\Chat_Room\\src\\index.js",[],["36","37"],"E:\\react\\Chat_Room\\src\\reportWebVitals.js",[],"E:\\react\\Chat_Room\\src\\App.js",[],"E:\\react\\Chat_Room\\src\\componenets\\join\\Join.js",[],"E:\\react\\Chat_Room\\src\\componenets\\Chat\\Chat.js",["38","39","40"],"import React, {Component} from \"react\";\r\nimport io from 'socket.io-client';\r\nimport audio from '../sound/whatsapp_incoming.mp3'\r\nimport './Chatt.css'\r\nimport {firebase} from \"../../config/Config\";\r\nimport {Recorder} from 'react-voice-recorder'\r\nimport {Dialog,DialogContent} from '@material-ui/core'\r\nimport 'react-voice-recorder/dist/index.css'\r\nimport Drawer from \"./Drawer\";\r\nimport Loader from '../Loader'\r\n\r\nconst socket = io('http://localhost:4000');\r\n\r\n\r\nvar storageRef = firebase.storage().ref();\r\n\r\nclass Chat extends Component {\r\n\r\n\r\n    myAudio = React.createRef()\r\n    state = {\r\n        message: '',\r\n        Messages: [],\r\n        connectedNames: [],\r\n        room:'',\r\n        loading:false,\r\n        src:'',\r\n        writing:'',\r\n        progress:0\r\n    }\r\n\r\n     onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            console.log(e.target.files);\r\n            if (!e.target.files[0].type.match(\"image.*\")) {\r\n                alert(\"Please select image only.\");\r\n            } else {\r\n                this.setState({loading:true})\r\n                const reader = new FileReader();\r\n                reader.addEventListener(\"load\", () => {\r\n                        this.setState({src:reader.result})\r\n                    }\r\n                );\r\n                reader.readAsDataURL(e.target.files[0], e.target.files[0].name);\r\n\r\n\r\n               this.fileUpload(e.target.files[0],`image/${e.target.files[0].name}`)\r\n\r\n                console.log(e.target.files[0]);\r\n            }\r\n\r\n\r\n        }\r\n    };\r\n\r\n     fileUpload = (file, fileName) => {\r\n        console.log(file);\r\n\r\n\r\n        var uploadTask = storageRef.child('chat/' + fileName).put(file);\r\n        uploadTask.on('state_changed', (snapshot) => {\r\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload is ' + progress + '% done');\r\n            this.setState({progress:Math.floor(progress)})\r\n            switch (snapshot.state) {\r\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                    console.log('Upload is paused');\r\n                    alert('Upload is paused')\r\n                    break;\r\n                case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                    console.log('Upload is running');\r\n                    break;\r\n            }\r\n        }, (error) => {\r\n            // Handle unsuccessful uploads\r\n        }, () => {\r\n            // Handle successful uploads on complete\r\n            // For instance, get the download URL: https://firebasestorage.googleapis.com/...\r\n            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n                console.log('File available at', downloadURL);\r\n\r\n\r\n                this.setState({src:downloadURL,loading:false})\r\n                if (file?.type?.match(\"image.*\")) {\r\n                    // sendMessage('image', downloadURL);\r\n                } else {\r\n                    // sendMessage('audio', downloadURL);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        socket.emit('join_room', this.props.room)\r\n        socket.emit('new_user_joined', {name: this.props.name, room: this.props.room})\r\n        socket.on('welcome', receiveMessage => {\r\n\r\n            let local = this.state.Messages\r\n\r\n            let div = <div style={{float: 'left', clear: 'both'}} className=\"d-flex justify-content-end mb-4\">\r\n                <div className=\"msg_cotainer\">\r\n                    <span className=\"name\">{receiveMessage.name}</span>\r\n                    {receiveMessage.message}\r\n                    <span className=\"msg_time_send\">{receiveMessage.time}</span>\r\n                </div>\r\n\r\n            </div>\r\n            local.push(div)\r\n            this.audioPlay()\r\n            this.setState({Messages: local})\r\n        });\r\n\r\n    }\r\n    componentWillMount() {\r\n        socket.on('roomData', users => {\r\n                this.setState({connectedNames: users.users,room:users.room})\r\n        })\r\n        socket.on('some_one_writing', message => {\r\n            this.setState({writing: message.message})\r\n        })\r\n        socket.on('user_joined', receiveMessage => {\r\n\r\n            let local = this.state.Messages\r\n\r\n            let div = <div style={{float: 'left', clear: 'both'}} className=\"d-flex justify-content-end mb-4\">\r\n                <div className=\"msg_cotainer\">\r\n                    <span className=\"name\">{receiveMessage.name}</span>\r\n                    {receiveMessage.message}\r\n                    <span className=\"msg_time_send\">{receiveMessage.time}</span>\r\n                </div>\r\n\r\n            </div>\r\n            local.push(div)\r\n            if (receiveMessage){\r\n                this.audioPlay()\r\n\r\n            }\r\n            this.setState({Messages: local})\r\n        });\r\n        socket.on('roomDataDisconnect', users => {\r\n            this.setState({connectedNames: users.users,room:users.room})\r\n        })\r\n        socket.on('leave', receiveMessage => {\r\n\r\n            let local = this.state.Messages\r\n            let div = <div style={{float: 'left', clear: 'both'}} className=\"d-flex justify-content-end mb-4\">\r\n                <div className=\"msg_cotainer\">\r\n                    <span className=\"name\">{receiveMessage.name}</span>\r\n                    {receiveMessage.message}\r\n                    <span className=\"msg_time_send\">{receiveMessage.time}</span>\r\n                </div>\r\n\r\n            </div>\r\n            local.push(div)\r\n\r\n\r\n            this.audioPlay()\r\n            this.setState({Messages: local})\r\n        });\r\n        socket.on('receiveMessage', receiveMessage => {\r\n\r\n            let local = this.state.Messages\r\n            let div = <div style={{float: 'left', clear: 'both'}} className=\"d-flex justify-content-end mb-4\">\r\n                <div className=\"msg_cotainer\">\r\n                    <span className=\"name\">{receiveMessage.name}</span>\r\n                    {receiveMessage.message}\r\n                    <span className=\"msg_time_send\">{receiveMessage.time}</span>\r\n                </div>\r\n\r\n            </div>\r\n            local.push(div)\r\n            this.audioPlay()\r\n            this.setState({Messages: local})\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    onValue = (e) => {\r\n        this.setState({message: e.target.value})\r\n        console.log(e);\r\n    }\r\n    sendMessages = () => {\r\n        this.setState({writing:'',})\r\n\r\n        socket.emit('sendMessage', {\r\n            message: this.state.message,\r\n            time: new Date().toLocaleTimeString(),\r\n            name: this.props.name,\r\n            room: this.props.room\r\n        })\r\n        let local = this.state.Messages\r\n        let div = <div style={{float: 'right', clear: 'both'}} className=\"d-flex justify-content-end mb-4\">\r\n            <div className=\"msg_cotainer_send\">\r\n                <span className=\"name\">{this.props.name}</span>\r\n                {this.state.message}\r\n                <span className=\"msg_time_send\">{new Date().toLocaleTimeString()}</span>\r\n            </div>\r\n\r\n        </div>\r\n        local.push(div)\r\n        this.setState({Messages: local})\r\n        this.setState({message: ''})\r\n    }\r\n    sendMessagesEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.sendMessages()\r\n        }\r\n        socket.emit('writing','user');\r\n        this.setState({writing:''})\r\n\r\n    }\r\n    audioPlay = () => {\r\n            this.myAudio.current.play();\r\n    }\r\n\r\n    render() {\r\n\r\n         let {loading,src,progress}= this.state\r\n\r\n        return (\r\n            <div className=\"main\">\r\n                    <Drawer onSelectFile={this.onSelectFile} onClick={this.sendMessages} onChange={this.onValue} value={this.state.message} sendMessagesEnter={this.sendMessagesEnter} Messages={this.state.Messages} connectedNames={this.state.connectedNames} room={this.state.room} />\r\n\r\n                <audio ref={this.myAudio} id='audio' src={audio}> </audio>\r\n\r\n                <Dialog\r\n                    open={loading}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\">\r\n                    <DialogContent style={{textAlign: \"center\", paddingTop: \"30px\"}}>\r\n                        {src?\r\n                            <Loader  value={progress}/>\r\n                            :\r\n                            <img style={{width: '60px', height: '60px'}} src=\"https://i.gifer.com/ZZ5H.gif\" alt=\"\"/>\r\n\r\n                        }\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat\r\n","E:\\react\\Chat_Room\\src\\componenets\\Chat\\Drawer.js",[],"E:\\react\\Chat_Room\\src\\config\\Config.js",[],"E:\\react\\Chat_Room\\src\\componenets\\Loader.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":16},{"ruleId":"45","severity":1,"message":"49","line":7,"column":9,"nodeType":"47","messageId":"48","endLine":7,"endColumn":17},{"ruleId":"50","severity":1,"message":"51","line":66,"column":13,"nodeType":"52","messageId":"53","endLine":74,"endColumn":14},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'SendIcon' is defined but never used.","Identifier","unusedVar","'Recorder' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]