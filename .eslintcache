[{"E:\\react\\Chat_Room\\src\\index.js":"1","E:\\react\\Chat_Room\\src\\reportWebVitals.js":"2","E:\\react\\Chat_Room\\src\\App.js":"3","E:\\react\\Chat_Room\\src\\componenets\\join\\Join.js":"4","E:\\react\\Chat_Room\\src\\componenets\\Chat\\Drawer.js":"5","E:\\react\\Chat_Room\\src\\config\\Config.js":"6","E:\\react\\Chat_Room\\src\\componenets\\Loader.js":"7","E:\\react\\Chat_Room\\src\\componenets\\Chat\\MessageContainer.js":"8","E:\\react\\Chat_Room\\src\\Test.js":"9","E:\\react\\Chat_Room\\src\\componenets\\Chat\\Chat.js":"10"},{"size":476,"mtime":1610524039822,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1609662719999,"results":"13","hashOfConfig":"12"},{"size":909,"mtime":1610480086992,"results":"14","hashOfConfig":"12"},{"size":1544,"mtime":1610532821863,"results":"15","hashOfConfig":"12"},{"size":11030,"mtime":1610524042998,"results":"16","hashOfConfig":"12"},{"size":562,"mtime":1610613439066,"results":"17","hashOfConfig":"12"},{"size":2314,"mtime":1610477624332,"results":"18","hashOfConfig":"12"},{"size":2574,"mtime":1610526714263,"results":"19","hashOfConfig":"12"},{"size":1773,"mtime":1610523225654,"results":"20","hashOfConfig":"12"},{"size":9213,"mtime":1610615968126,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"hf6du9",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\react\\Chat_Room\\src\\index.js",["46"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Test from \"./Test\";\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["47","48"],"E:\\react\\Chat_Room\\src\\reportWebVitals.js",[],"E:\\react\\Chat_Room\\src\\App.js",[],"E:\\react\\Chat_Room\\src\\componenets\\join\\Join.js",[],"E:\\react\\Chat_Room\\src\\componenets\\Chat\\Drawer.js",["49","50"],"import React,{useRef,useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Drawer,\r\n    Menu,\r\n    MenuItem,\r\n    Fade,\r\n    Hidden,\r\n    Divider,\r\n    CssBaseline,\r\n    AppBar,\r\n    IconButton,\r\n    List,\r\n    Toolbar,\r\n    Typography,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n} from '@material-ui/core';\r\nimport SimpleReactLightbox, {SRLWrapper} from 'simple-react-lightbox'\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\r\nimport AttachmentIcon from '@material-ui/icons/Attachment';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport {Recorder} from 'react-voice-recorder'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst options = {\r\n    settings: {\r\n        autoplaySpeed: 1500,\r\n        transitionSpeed: 900,\r\n    },\r\n    buttons: {\r\n        backgroundColor: 'rgba(30,30,36,0.8)',\r\n        iconColor: 'rgba(255, 255, 255, 0.8)',\r\n        iconPadding: '5px',\r\n        showAutoplayButton: true,\r\n        showCloseButton: true,\r\n        showDownloadButton: true,\r\n        showFullscreenButton: true,\r\n        showNextButton: true,\r\n        showPrevButton: true,\r\n        size: '40px'\r\n    }\r\n\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n        },\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        background: '#f5f5f5',\r\n        width: '100%',\r\n\r\n    },\r\n}));\r\n\r\nfunction ResponsiveDrawer({\r\n                              window,\r\n                              connectedNames,\r\n                              Messages,\r\n                              onClick,\r\n                              onChange,\r\n                              value,\r\n                              sendMessagesEnter,\r\n                              room,\r\n                              onSelectFile,\r\n                              handleClickOpen,\r\n                              handleClose,\r\n                              open,\r\n                              audioDetails,\r\n                              handleAudioStop,\r\n                              handleAudioUpload,\r\n                              handleRest,\r\n                              sendMessages,\r\n\r\n                          }) {\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const openSelect = Boolean(anchorEl);\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}>\r\n                <h2 style={{fontSize: '15px', textAlign: 'center'}}>{connectedNames.length} people are connected</h2>\r\n                <h1 style={{textAlign: 'center'}}>Room : {room}</h1>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                {connectedNames.map((item, index) => {\r\n                    return (\r\n                        <li key={index} className=\"active\">\r\n                            <div className=\"user_info\">\r\n                                <span style={{color: 'black'}}>{item.name} <FiberManualRecordIcon\r\n                                    className='online_icon'/></span>\r\n                                <p style={{color: 'black'}}>{item.name} is connected</p>\r\n                            </div>\r\n\r\n                        </li>\r\n                    )\r\n                })}\r\n            </List>\r\n\r\n        </div>\r\n    );\r\n\r\n    const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                        Hand Book\r\n                    </Typography>\r\n\r\n\r\n                    <IconButton\r\n                        aria-controls=\"fade-menu\" aria-haspopup=\"true\"\r\n                        onClick={(e) => setAnchorEl(e.currentTarget)}\r\n                        edge=\"start\"\r\n                    >\r\n                        <AttachmentIcon fontSize='large' style={{color: 'white'}}/>\r\n                    </IconButton>\r\n                    <Menu\r\n                        id=\"long-menu\"\r\n                        anchorEl={anchorEl}\r\n                        keepMounted\r\n                        open={openSelect}\r\n                        onClose={() => setAnchorEl(null)}\r\n                        TransitionComponent={Fade}\r\n\r\n                        PaperProps={{\r\n                            style: {\r\n                                width: '20ch',\r\n                            },\r\n                        }}\r\n                    >\r\n                        <label htmlFor=\"outlined-button-image\">\r\n                            <MenuItem style={{display: 'flex', justifyContent: 'flex-start'}}\r\n                                      onClick={() => setAnchorEl(null)}> <PhotoCameraIcon\r\n                                style={{marginRight: '10px', color: 'grey'}}/> Photos\r\n                            </MenuItem>\r\n                            <input style={{display: 'none'}} id=\"outlined-button-image\" type=\"file\"\r\n                                   onChange={(e) => onSelectFile(e, 'image')}/>\r\n\r\n                        </label>\r\n                        <label htmlFor=\"outlined-button-video\">\r\n                            <MenuItem style={{display: 'flex', justifyContent: 'flex-start'}}\r\n                                      onClick={() => setAnchorEl(null)}> <VideocamIcon\r\n                                style={{marginRight: '10px', color: 'grey'}}/> Video\r\n                            </MenuItem>\r\n                            <input style={{display: 'none'}} id=\"outlined-button-video\" type=\"file\"\r\n                                   onChange={(e) => onSelectFile(e, 'video')}/>\r\n                        </label>\r\n\r\n                    </Menu>\r\n\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true,\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <div className={classes.content}>\r\n                    <ScrollToBottom className={'chat_body'}>\r\n\r\n                    <SimpleReactLightbox>\r\n                        <SRLWrapper options={options}>\r\n                            {Messages.map((item, index) => {\r\n                                return <div   key={index}>{item}</div>\r\n                            })}\r\n                        </SRLWrapper>\r\n                    </SimpleReactLightbox>\r\n                    </ScrollToBottom>\r\n\r\n\r\n                <div className=\"chat_footer\">\r\n\r\n                    <input onKeyPress={sendMessagesEnter}\r\n                           value={value}\r\n                           onChange={onChange}\r\n                           placeholder=\"Type your message...\"/>\r\n                    <IconButton onClick={() => sendMessages('text', value)} className='send_btn'>\r\n                        <SendIcon fontSize='large'/>\r\n                    </IconButton>\r\n                    <IconButton onClick={handleClickOpen} className='send_btn'>\r\n                        <MicIcon fontSize='large'/>\r\n                    </IconButton>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <Dialog fullWidth onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                <div className='recorderHeader'>\r\n                    <DialogTitle id=\"customized-dialog-title\">\r\n                        Send Voice\r\n                    </DialogTitle>\r\n                    <IconButton onClick={handleClose}>\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                </div>\r\n\r\n                <DialogContent style={{background: ' #212121'}} dividers>\r\n                    <Recorder\r\n                        record={true}\r\n                        audioURL={audioDetails?.url}\r\n                        showUIAudio\r\n                        handleAudioStop={data => handleAudioStop(data)}\r\n                        handleAudioUpload={data => audioDetails?.url ? handleAudioUpload(data) : ''}\r\n                        handleRest={handleRest}\r\n                    />\r\n\r\n                </DialogContent>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n    /**\r\n     * Injected by the documentation to work in an iframe.\r\n     * You won't need it on your project.\r\n     */\r\n    window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","E:\\react\\Chat_Room\\src\\config\\Config.js",[],"E:\\react\\Chat_Room\\src\\componenets\\Loader.js",[],"E:\\react\\Chat_Room\\src\\componenets\\Chat\\MessageContainer.js",["51"],"import React from \"react\";\r\n\r\n\r\nfunction MessageContainer({name, message, type, mine, time}) {\r\n\r\n    function Message() {\r\n\r\n\r\n        if (type === 'text') {\r\n            return (\r\n                <p\r\n                    className={`chat_message  ${mine && \"chat_receiver\"}`}>\r\n                            <span\r\n                                className=\"chat_name\">{name} </span>\r\n                    <span className='message'> {message}</span>\r\n                    <span\r\n                        className=\"chat_timestamp\">{time}</span>\r\n                </p>\r\n            )\r\n        } else if (type === 'image') {\r\n            return (\r\n                <p\r\n                    className={`chat_message  ${mine && \"chat_receiver\"}`}>\r\n                            <span\r\n                                className=\"chat_name\">{name} </span>\r\n                    <img className='message_image' src={message}\r\n                         alt={'IMAGE'}/>\r\n                    <span\r\n                        className=\"chat_timestamp\">{time}</span>\r\n                    <span className='send_message_status'>\r\n                            </span>\r\n                </p>\r\n            )\r\n        } else if (type === 'audio') {\r\n            return (\r\n                <p\r\n                    className={`chat_message  ${mine && \"chat_receiver\"}`}>\r\n                            <span\r\n                                className=\"chat_name\">{name} </span>\r\n                    <audio controls>\r\n                        <source src={message}/>\r\n                    </audio>\r\n                    <span\r\n                        className=\"chat_timestamp\">{time}</span>\r\n                    <span className='send_message_status'>\r\n                            </span>\r\n                </p>\r\n            )\r\n        } else if (type === \"video\") {\r\n            return (\r\n                <p\r\n                    className={`chat_message  ${mine && \"chat_receiver\"}`}>\r\n                            <span\r\n                                className=\"chat_name\">{name} </span>\r\n                    <video className='message_video' controls>\r\n                        <source src={message} type=\"video/mp4\"/>\r\n                    </video>\r\n\r\n                    <span\r\n                        className=\"chat_timestamp\">{time}</span>\r\n                    <span className='send_message_status'>\r\n                            </span>\r\n                </p>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            {Message()}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MessageContainer\r\n","E:\\react\\Chat_Room\\src\\Test.js",[],"E:\\react\\Chat_Room\\src\\componenets\\Chat\\Chat.js",["52","53"],{"ruleId":"54","severity":1,"message":"55","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":12},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"54","severity":1,"message":"62","line":1,"column":15,"nodeType":"56","messageId":"57","endLine":1,"endColumn":21},{"ruleId":"54","severity":1,"message":"63","line":1,"column":22,"nodeType":"56","messageId":"57","endLine":1,"endColumn":31},{"ruleId":"64","severity":1,"message":"65","line":26,"column":21,"nodeType":"66","endLine":27,"endColumn":41},{"ruleId":"54","severity":1,"message":"67","line":6,"column":9,"nodeType":"56","messageId":"57","endLine":6,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":68,"column":13,"nodeType":"70","messageId":"71","endLine":74,"endColumn":14},"no-unused-vars","'Test' is defined but never used.","Identifier","unusedVar","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Recorder' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]