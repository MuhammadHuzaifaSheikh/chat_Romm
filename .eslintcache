[{"E:\\react\\Chat_Room\\src\\index.js":"1","E:\\react\\Chat_Room\\src\\reportWebVitals.js":"2","E:\\react\\Chat_Room\\src\\App.js":"3","E:\\react\\Chat_Room\\src\\componenets\\join\\Join.js":"4","E:\\react\\Chat_Room\\src\\componenets\\Chat\\Chat.js":"5","E:\\react\\Chat_Room\\src\\componenets\\Chat\\Drawer.js":"6"},{"size":500,"mtime":1609662719999,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1609662719999,"results":"9","hashOfConfig":"8"},{"size":907,"mtime":1610362444021,"results":"10","hashOfConfig":"8"},{"size":1255,"mtime":1598698012859,"results":"11","hashOfConfig":"8"},{"size":5086,"mtime":1610368354329,"results":"12","hashOfConfig":"8"},{"size":5560,"mtime":1610368317998,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d3f8lo",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"E:\\react\\Chat_Room\\src\\index.js",[],"E:\\react\\Chat_Room\\src\\reportWebVitals.js",[],"E:\\react\\Chat_Room\\src\\App.js",[],"E:\\react\\Chat_Room\\src\\componenets\\join\\Join.js",[],"E:\\react\\Chat_Room\\src\\componenets\\Chat\\Chat.js",["28"],"E:\\react\\Chat_Room\\src\\componenets\\Chat\\Drawer.js",["29"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport Button from '@material-ui/core/Button'\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n        },\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\nfunction ResponsiveDrawer({window, connectedNames,Messages}) {\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}/>\r\n            <Divider/>\r\n            <List>\r\n                {connectedNames.map((item, index) => {\r\n                    return (\r\n                        <li key={index} className=\"active\">\r\n                            <div className=\"d-flex bd-highlight\">\r\n                                <div className=\"user_info\">\r\n                                    <span>{item.name} <FiberManualRecordIcon className='online_icon'/></span>\r\n                                    <p>{item.name} is connected</p>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </List>\r\n\r\n        </div>\r\n    );\r\n\r\n    const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <h2>1 people are connected in Room : d</h2>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true,\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar}/>\r\n                <div className=\"chat_header\">\r\n\r\n                </div>\r\n                <div className=\"chat_container\">\r\n                    {Messages.map((item, index) => {\r\n                        return <div key={index}>{item}</div>\r\n                    })}\r\n\r\n                </div>\r\n                <div  className=\"chat_footer\">\r\n                    <input type=\"text\" id=\"myInput\" placeholder=\"Send...\"/>\r\n                    <Button className='send_btn'>\r\n                        <SendIcon fontSize='large'/>\r\n                    </Button>\r\n\r\n                </div>\r\n\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n    /**\r\n     * Injected by the documentation to work in an iframe.\r\n     * You won't need it on your project.\r\n     */\r\n    window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n",["30","31"],{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":16},{"ruleId":"32","severity":1,"message":"36","line":17,"column":8,"nodeType":"34","messageId":"35","endLine":17,"endColumn":18},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},"no-unused-vars","'SendIcon' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-global-assign","no-unsafe-negation"]